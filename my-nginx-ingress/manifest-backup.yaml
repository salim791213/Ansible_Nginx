apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "7"
    meta.helm.sh/release-name: my-nginx-ingress
    meta.helm.sh/release-namespace: ingress-nginx
  creationTimestamp: "2024-02-26T01:38:48Z"
  generation: 7
  labels:
    app.kubernetes.io/managed-by: Helm
  name: my-nginx-ingress-deployment
  namespace: ingress-nginx
  resourceVersion: "65603"
  uid: fa445f05-4358-4f27-9e3d-4046fa7e73b8
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: my-nginx-ingress
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2024-02-26T02:47:52+01:00"
      creationTimestamp: null
      labels:
        app: my-nginx-ingress
    spec:
      containers:
      - image: nginx:1.19.0
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 2
  conditions:
  - lastTransitionTime: "2024-02-26T01:38:52Z"
    lastUpdateTime: "2024-02-26T01:38:52Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2024-02-26T13:40:28Z"
    lastUpdateTime: "2024-02-26T13:40:36Z"
    message: ReplicaSet "my-nginx-ingress-deployment-65dbc58d95" has successfully
      progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 7
  readyReplicas: 2
  replicas: 2
  updatedReplicas: 2
